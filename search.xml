<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Unity 中实现擦除功能</title>
      <link href="2021/03/03/Unity-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%93%A6%E9%99%A4%E5%8A%9F%E8%83%BD/"/>
      <url>2021/03/03/Unity-%E4%B8%AD%E5%AE%9E%E7%8E%B0%E6%93%A6%E9%99%A4%E5%8A%9F%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" /><p><a href="https://www.daly.top/" title="描述">我的博客</a>查看。</p><p><a href="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/bg2.jpg" title="描述"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/bg2.jpg" alt="" /></a></p><p><a href='https://www.daly.top'><img src= "/img/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/bg3.jpg' alt='Fork me on Gitee'></img></a></p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
          <category> 理论知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>untiy 游戏icon压缩格式设置</title>
      <link href="2021/02/13/Unity%E6%B8%B8%E6%88%8Ficon%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/02/13/Unity%E6%B8%B8%E6%88%8Ficon%E5%8E%8B%E7%BC%A9%E6%A0%BC%E5%BC%8F%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" /><h2 id="unity游戏icon压缩格式设置解决图标模糊不清晰问题"><a class="markdownIt-Anchor" href="#unity游戏icon压缩格式设置解决图标模糊不清晰问题"></a> Unity游戏icon压缩格式设置（解决图标模糊不清晰问题）</h2><p><a href="https://unity.cn/" title="Unity游戏icon压缩格式设置（解决图标模糊不清晰问题）">原文</a>查看。</p><p><a href="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/gameIcon.jpg"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/gameIcon.jpg" alt="" /></a></p><p>我们打出app安装到真机上之后，发现桌面上的icon很模糊，有可能就是因为你的icon格式设置的问题。</p><p>icon的格式设置改成如下（注意标红的地方）：</p><pre><code>Texture: Default    Texture: 2D    sRGB(Color Texture): true    Alpha Source: Input Texture Alpha    Alpha Is Transparency: true （如果有透明通道，一般是图标圆角，这个要设置为true）Advanced    Non Power of 2: None    Read/Write Enabled: false    Generate Mip Maps: false    Wrap Mode: ClampFilter Mode: Trilinear</code></pre><p>如果图标有透明通道，一般是图标圆角，压缩格式要使用RGBA，不可以是RGB也不可一世ETC</p><hr /><p>关于Non Power of 2<br />Unity导入的图片分辨率要求是2的N次幂，如果不是2的N次幂，会根据设置进行缩放：None 无，To nearest 到最近的，To larger 到较大的，To smaller 到较小的</p><p>关于Generate Mip Maps<br />使用Generate Mip Maps后，会生成该图片的低分辨图片（1/2,1/4,1/8…八个小贴图），这些小图会使生成的资源文件变大1/3，在3D渲染时Unity会根据物体显示的大小（或者距离）自动选择不同的分辨率以提高渲染效率。 一般来说，2D显示用的图片不会有这种需求，所以关闭这个选项可以减少包体的大小。</p><p>关于 Wrap Mode<br />循环模式（重复或强制拉伸）。Repeat：重复平铺，Clamp: 拉伸。</p><p>关于Filter Mode<br />当该纹理由于3D变换进行拉伸时，它将如何被过滤插值。共有三种选择：<br />Point 单点插值，纹理将变得块状化（blocky up close）；<br />Bilinear 双线性插值，纹理将变得模糊（blurry up close）；<br />Trilinear 三线性插值，类似Bilinear，但是纹理还会在不同的mip水平之间（between the different mip levels）进行模糊。</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
          <category> 理论知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>untiy 常用特性</title>
      <link href="2021/02/13/Untiy-%E5%B8%B8%E7%94%A8%E7%89%B9%E6%80%A7/"/>
      <url>2021/02/13/Untiy-%E5%B8%B8%E7%94%A8%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" /><h2 id="unity-常用特性"><a class="markdownIt-Anchor" href="#unity-常用特性"></a> Unity 常用特性</h2><p><a href="https://unity.cn/" title="Unity 官网特性">Unity 官网特性</a>查看。</p><p><a href="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/tx1.gif"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/tx1.gif" alt="" /></a></p><ul><li><p>重命名不丢失数据<br />[FormerlySerializedAs(“对象名”)]</p></li><li><p>在编辑模式下执行代码<br />[ExecuteInEditorMode]</p></li><li><p>防止将相同类型（或子类型）的 MonoBehaviour 多次添加到 GameObject。<br />[DisallowMultipleComponent]</p></li><li><p>程序集级别的属性。具有该属性的程序集中的任何类都将被视为编辑器类。<br />[AssemblyIsEditorAssembly]</p></li><li><p>使脚本的实例总是执行，无论是作为播放模式的一部分还是编辑时。<br />[ExecuteAlways]</p></li><li><p>标记方法已过时<br />[system.obsolete(“注释”)]</p></li><li><p>把公有字段的隐藏<br />[HideInInspector]</p></li><li><p>第一次点击到父物体上（挂载到类上）<br />[SelectionBase]</p></li><li><p>属性捆绑<br />[RequireComponent(typeof(绑定的组件类型)]</p></li><li><p>创建菜单属性<br />[MenuItem(“菜单名/属性名”)]</p></li><li><p>创建菜单子节点<br />[AddComponentMenu(path)]</p></li><li><p>访问网站<br />[HelpURL(“<a href="Https://xxxx.com">Https://xxxx.com</a>”)]</p></li><li><p>[Tooltip] 提示</p></li><li><p>[Heade]  加粗</p></li><li><p>[Range(minnum,maxNum)] 取值范围</p></li><li><p>[TextArea] 文本框扩大</p></li><li><p>[Multiline] 文本框扩大</p></li><li><p>[ContextMenu] 调用脚本</p></li><li><p>[callNull] 判断不为空</p></li><li><p>[Toggle(“value”)] 序列化为bool值</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
          <category> 理论知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存读档界面UI滑动效果</title>
      <link href="2021/02/13/%E5%AD%98%E8%AF%BB%E6%A1%A3%E7%95%8C%E9%9D%A2UI%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
      <url>2021/02/13/%E5%AD%98%E8%AF%BB%E6%A1%A3%E7%95%8C%E9%9D%A2UI%E6%BB%91%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" /><h2 id="存读档界面ui滑动效果"><a class="markdownIt-Anchor" href="#存读档界面ui滑动效果"></a> 存读档界面UI滑动效果</h2><p><a href="https://unity.cn/" title="untiy 游戏icon压缩格式设置">原文</a>查看。</p><p><a href="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/uiSlide.jpg"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/uiSlide.jpg" alt="" /></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">using System.Collections;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using DG.Tweening;</span><br><span class="line">using DSFramework;</span><br><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.Serialization;</span><br><span class="line">using UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public enum FileDataType</span><br><span class="line">&#123;</span><br><span class="line">    NONE,</span><br><span class="line">    SAVE,</span><br><span class="line">    LOAD,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 存读档类</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">public class FileDataPageView : PageViewBase</span><br><span class="line">&#123;</span><br><span class="line">    private const uint PageCount &#x3D; 5;</span><br><span class="line">    private const uint Spacing &#x3D; 35;</span><br><span class="line"></span><br><span class="line">    private FileDataType type;</span><br><span class="line"></span><br><span class="line">    [FormerlySerializedAs(&quot;m_HorizontalLayoutGroups&quot;)] [SerializeField]</span><br><span class="line">    private HorizontalLayoutGroup m_HorizontalLayoutGroups;</span><br><span class="line"></span><br><span class="line">    [FormerlySerializedAs(&quot;m_ContentSizeFitter&quot;)] [SerializeField]</span><br><span class="line">    private ContentSizeFitter m_ContentSizeFitter;</span><br><span class="line"></span><br><span class="line">    [FormerlySerializedAs(&quot;m_ScrollRect&quot;)] [SerializeField]</span><br><span class="line">    private ScrollRect m_ScrollRect;</span><br><span class="line"></span><br><span class="line">    [SerializeField] private RectTransform m_ContentRect;</span><br><span class="line"></span><br><span class="line">    private DSImageButton m_ColseButton;</span><br><span class="line">    private DSFadeButton m_LeftPageButton;</span><br><span class="line">    private DSFadeButton m_RightPageButton;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private bool PageMoveing;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private void ContentSizeFitterInit(bool value)</span><br><span class="line">    &#123;</span><br><span class="line">        m_ContentSizeFitter.horizontalFit &#x3D; ContentSizeFitter.FitMode.PreferredSize;</span><br><span class="line">        m_ContentSizeFitter.verticalFit &#x3D; ContentSizeFitter.FitMode.Unconstrained;</span><br><span class="line"></span><br><span class="line">        m_ContentSizeFitter.enabled &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void HorizontalLayoutGroupInit()</span><br><span class="line">    &#123;</span><br><span class="line">        m_HorizontalLayoutGroups.spacing &#x3D; Spacing;</span><br><span class="line">        m_HorizontalLayoutGroups.childAlignment &#x3D; TextAnchor.MiddleCenter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void ScrollRectInit()</span><br><span class="line">    &#123;</span><br><span class="line">        m_ScrollRect.horizontal &#x3D; true;</span><br><span class="line">        m_ScrollRect.vertical &#x3D; false;</span><br><span class="line">        m_ScrollRect.movementType &#x3D; ScrollRect.MovementType.Elastic;</span><br><span class="line">        m_ScrollRect.elasticity &#x3D; 0.1f;</span><br><span class="line">        m_ScrollRect.inertia &#x3D; true;</span><br><span class="line">        m_ScrollRect.decelerationRate &#x3D; 0.135f;</span><br><span class="line">        m_ScrollRect.scrollSensitivity &#x3D; 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void Init(params object[] option)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; RegisterUIEvent();</span><br><span class="line">        base.Init(option);</span><br><span class="line"></span><br><span class="line">        ScrollRectInit();</span><br><span class="line">        HorizontalLayoutGroupInit();</span><br><span class="line">        ContentSizeFitterInit(m_ScrollRect.content.childCount &gt;&#x3D; PageCount);</span><br><span class="line"></span><br><span class="line">        m_ColseButton &#x3D; transform.Find(&quot;Content&#x2F;ButtonGroup&#x2F;CloseButton&quot;).GetComponent&lt;DSImageButton&gt;();</span><br><span class="line">        m_LeftPageButton &#x3D; transform.Find(&quot;Content&#x2F;ButtonGroup&#x2F;LeftPageButton&quot;).GetComponent&lt;DSFadeButton&gt;();</span><br><span class="line">        m_RightPageButton &#x3D; transform.Find(&quot;Content&#x2F;ButtonGroup&#x2F;RightPageButton&quot;).GetComponent&lt;DSFadeButton&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        m_LeftPageButton.OnClick.AddListener(() &#x3D;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            if (PageMoveing)</span><br><span class="line">                return;</span><br><span class="line"></span><br><span class="line">            float anchoredPositionX &#x3D; m_ContentRect.anchoredPosition.x + 2500 &lt;&#x3D; 0</span><br><span class="line">                ? m_ContentRect.anchoredPosition.x + 2500</span><br><span class="line">                : 0;</span><br><span class="line"></span><br><span class="line">            PageMoveing &#x3D; true;</span><br><span class="line">            m_ContentRect.DOAnchorPos(new Vector2(anchoredPositionX, m_ContentRect.anchoredPosition.y), 0.8f).SetEase(Ease.OutExpo)</span><br><span class="line">                .OnComplete(</span><br><span class="line">                    () &#x3D;&gt; &#123; PageMoveing &#x3D; false; &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        m_RightPageButton.OnClick.AddListener(() &#x3D;&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            if (PageMoveing)</span><br><span class="line">                return;</span><br><span class="line">            </span><br><span class="line">            float anchoredPositionX &#x3D; m_ContentRect.anchoredPosition.x - 2500 &gt;&#x3D; -m_ContentRect.sizeDelta.x</span><br><span class="line">                ? m_ContentRect.anchoredPosition.x - 2500</span><br><span class="line">                : -m_ContentRect.sizeDelta.x;</span><br><span class="line">            PageMoveing &#x3D; true;</span><br><span class="line">            m_ContentRect.DOAnchorPos(new Vector2(anchoredPositionX, m_ContentRect.anchoredPosition.y), 0.8f).SetEase(Ease.OutExpo)</span><br><span class="line">                .OnComplete(</span><br><span class="line">                    () &#x3D;&gt; &#123; PageMoveing &#x3D; false; &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        m_ColseButton.OnClick.AddListener(() &#x3D;&gt; &#123; m_GameEntry.UI.ClosePage(); &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void OnDestroy()</span><br><span class="line">    &#123;</span><br><span class="line">        m_ColseButton.OnClick.RemoveAllListeners();</span><br><span class="line">        base.OnDestory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected override void SetKeyUI()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Input.GetKeyDown(KeyCode.Escape))</span><br><span class="line">        &#123;</span><br><span class="line">            m_GameEntry.UI.ClosePage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
          <category> 理论知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
            <tag> ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习 unity timeline</title>
      <link href="2021/02/13/%E5%AD%A6%E4%B9%A0%20unity%20timeline/"/>
      <url>2021/02/13/%E5%AD%A6%E4%B9%A0%20unity%20timeline/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" /><h3 id="timeline-理解与api解读"><a class="markdownIt-Anchor" href="#timeline-理解与api解读"></a> Timeline 理解与API解读</h3><p><a href="https://unity.cn/" title="Timeline 理解与API解读">unity 官网</a>查看。</p><p><a href="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/unity_timeline1.jpg"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/unity_timeline1.jpg" alt="" /></a></p><p>Timeline自有组件:</p><pre><code>Activation Track    Animation Track      Audio Track     Control Track       Playable Track      Track Group     </code></pre><p>PlayableGraph提供了Timeline的可视化图形结构，暂不支持编辑功能。如图：<br />Playable Track使Timeline具备可扩展性。</p><pre><code>PlayableAsset: 一个针对资源的基类,可以用于运行时实例化一个Playable脚本所驱动。PlayableBehaviour:可以向PlayableGraph增加用户的行为。PlayableBehaviour必须是连接到激活的输出的PlayableGraph的分支的一部分。关于该Playable的公有方法(都是回调函数)：OnBehaviourPuase ： 当Playable的play state变成PlayState.Paused的时候，这个方法被调用;OnBehaviourPlay ： 当Playable的PlayState变成PlayState.Playing的时候，这个方法被调用;OnGraphStart:   这个方法别调用，当前拥有PlayableBehavior的GraphStart开始的时候； OnGraphStop:   这个方法别调用，当前拥有PlayableBehavior的GraphStop开始的时候；    OnGraphCreate:   这个方法别调用，当前拥有PlayableBehavior的GraphCreate开始的时候；    OnGraphDestory:   这个方法别调用，当前拥有PlayableBehavior的GraphDestory开始的时候    PrepareFrame:   这个方法在Playable的PrepareFrame阶段被调用；    ProcessFrame:   这个方法在Playable的ProcessFrame阶段被调用；   </code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.Playables;</span><br><span class="line"></span><br><span class="line">[System.Serializable]</span><br><span class="line">public class LightControlAsset : PlayableAsset</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">    &#x2F;&#x2F;&#x2F; 由于PlayableAsset是个资源，它不能直接引用场景中的对象。此时ExposedReference会充当一个约定，表示在调用CreatePlayable时会解析一个对象。</span><br><span class="line">    &#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">    public ExposedReference&lt;Light&gt; light;</span><br><span class="line">    public Color color &#x3D; Color.gray;</span><br><span class="line">    public float intensity &#x3D; 1f;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Factory method that generates a playable based on this asset</span><br><span class="line">public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;CreatePlayable&quot;);</span><br><span class="line">        var playable &#x3D; ScriptPlayable&lt;LightControlBehaviour&gt;.Create(graph);</span><br><span class="line">        var lightControlBehaviour &#x3D; playable.GetBehaviour();</span><br><span class="line">        lightControlBehaviour.light &#x3D; light.Resolve(graph.GetResolver());</span><br><span class="line">        lightControlBehaviour.color &#x3D; color;</span><br><span class="line">        lightControlBehaviour.intensity &#x3D; intensity;</span><br><span class="line">        return playable;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">using UnityEngine;</span><br><span class="line">using UnityEngine.Playables;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;summary&gt;</span><br><span class="line">&#x2F;&#x2F;&#x2F; 目的：确定需要修改Light组件的哪些属性。而且PlayableBehaviour拥有名为ProcessFrame的方法可供重写。</span><br><span class="line">&#x2F;&#x2F;&#x2F; &lt;&#x2F;summary&gt;</span><br><span class="line">&#x2F;&#x2F; A behaviour that is attached to a playable</span><br><span class="line">public class LightControlBehaviour : PlayableBehaviour</span><br><span class="line">&#123;</span><br><span class="line">    public Light light &#x3D; null;</span><br><span class="line"></span><br><span class="line">    public Color color &#x3D; Color.white;</span><br><span class="line"></span><br><span class="line">    public float intensity &#x3D; 1;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Called when the owning graph starts playing</span><br><span class="line">    public override void OnGraphStart(Playable playable)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;OnGraphStart&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Called when the owning graph stops playing</span><br><span class="line">    public override void OnGraphStop(Playable playable)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;OnGraphStop&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Called when the state of the playable is set to Play</span><br><span class="line">    public override void OnBehaviourPlay(Playable playable, FrameData info)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;OnBehaviourPlay&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Called when the state of the playable is set to Paused</span><br><span class="line">    public override void OnBehaviourPause(Playable playable, FrameData info)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;OnBehaviourPause&quot;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Called each frame while the state is set to Play</span><br><span class="line">    public override void PrepareFrame(Playable playable, FrameData info)</span><br><span class="line">    &#123;</span><br><span class="line">        Debug.Log(&quot;PrepareFrame&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override void ProcessFrame(Playable playable, FrameData info, object playerData)</span><br><span class="line">    &#123;</span><br><span class="line">        if (light !&#x3D; null)</span><br><span class="line">        &#123;</span><br><span class="line">            light.color &#x3D; color;</span><br><span class="line">            light.intensity &#x3D; intensity;</span><br><span class="line">        &#125;</span><br><span class="line">        Debug.Log(&quot;ProcessFrame&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="unity-timeline封装方便动态设置timeline控制对象和参数"><a class="markdownIt-Anchor" href="#unity-timeline封装方便动态设置timeline控制对象和参数"></a> Unity Timeline封装，方便动态设置Timeline控制对象和参数</h3><p><a href="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/unity_timeline2.jpg"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/unity_timeline2.jpg" alt="" /></a></p><p>TimelineUnit.cs</p><p>using System.Collections.Generic;<br />using UnityEngine;<br />using UnityEngine.Timeline;<br />using UnityEngine.Playables;</p><p>public class TimelineUnit<br />{<br />public string name;<br />public PlayableDirector director;<br />public PlayableAsset asset;<br />public Dictionary&lt;string, PlayableBinding&gt; bindings;<br />public Dictionary&lt;string, Dictionary&lt;string, PlayableAsset&gt;&gt; clips;</p><pre><code>public void Init(string name, PlayableDirector director, PlayableAsset asset)&#123;    director.playableAsset = asset;    this.name = name;    this.director = director;    this.asset = asset;    bindings = new Dictionary&lt;string, PlayableBinding&gt;();    clips = new Dictionary&lt;string, Dictionary&lt;string, PlayableAsset&gt;&gt;();    foreach (var o in asset.outputs)    &#123;        var trackName = o.streamName;        bindings.Add(trackName, o);        var track = o.sourceObject as TrackAsset;        var clipList = track.GetClips();        foreach (var c in clipList)        &#123;            if (!clips.ContainsKey(trackName))            &#123;                clips[trackName] = new Dictionary&lt;string, PlayableAsset&gt;();            &#125;            var name2Clips = clips[trackName];            if (!name2Clips.ContainsKey(c.displayName))            &#123;                name2Clips.Add(c.displayName, c.asset as PlayableAsset);            &#125;        &#125;    &#125;&#125;public void SetBinding(string trackName, Object o)&#123;    director.SetGenericBinding(bindings[trackName].sourceObject, o);&#125;public T GetTrack&lt;T&gt;(string trackName) where T : TrackAsset&#123;    return bindings[trackName].sourceObject as T;&#125;public T GetClip&lt;T&gt;(string trackName, string clipName) where T : PlayableAsset&#123;    if (clips.ContainsKey(trackName))    &#123;        var track = clips[trackName];        if (track.ContainsKey(clipName))        &#123;            return track[clipName] as T;        &#125;        else        &#123;            Debug.LogError(&quot;GetClip Error, Track does not contain clip, trackName: &quot; + trackName + &quot;, clipName: &quot; + clipName);        &#125;    &#125;    else    &#123;        Debug.LogError(&quot;GetClip Error, Track does not contain clip, trackName: &quot; + trackName + &quot;, clipName: &quot; + clipName);    &#125;    return null;&#125;public void Play()&#123;    director.Play();&#125;</code></pre><p>}</p><p>TimelineHelper.cs</p><p>using UnityEngine;<br />using UnityEngine.Playables;</p><p>public class TimelineHelper<br />{<br />public static TimelineUnit AddTimeline(GameObject go, string timelineName)<br />{<br />var unit = new TimelineUnit();<br />var director = go.GetComponent<PlayableDirector>();<br />if (null == director)<br />director = go.AddComponent<PlayableDirector>();<br />var asset = Resources.Load<PlayableAsset>(“TimelineRes/” + timelineName);<br />unit.Init(timelineName, director, asset);<br />return unit;<br />}<br />}</p><p>现在做一个Timeline，然后进行测试</p><p>一个AnimationTrack，一个PlayableTrack，动画轨道不多讲，难点是PlayableTrack，这个是可以自定义逻辑的轨道</p><p>需要写两个类，一个继承PlayableAsset，一个继承PlayableBehaviour</p><p>using UnityEngine;<br />using UnityEngine.Playables;</p><p>public class MoveObjPlayableAsset : PlayableAsset<br />{<br />public GameObject go;<br />public Vector3 pos;</p><pre><code>public override Playable CreatePlayable(PlayableGraph graph, GameObject owner)&#123;    var bhv = new MoveObjPlayableBehaviour();    bhv.go = go;    bhv.pos = pos;    return ScriptPlayable&lt;MoveObjPlayableBehaviour&gt;.Create(graph, bhv);&#125;</code></pre><p>}</p><p>using UnityEngine;<br />using UnityEngine.Playables;</p><p>public class MoveObjPlayableBehaviour : PlayableBehaviour<br />{<br />public GameObject go;<br />public Vector3 pos;</p><pre><code>public override void OnGraphStart(Playable playable)&#123;    base.OnGraphStart(playable);    Debug.Log(&quot;OnGraphStart=======================&quot;);&#125;public override void OnGraphStop(Playable playable)&#123;    base.OnGraphStop(playable);    Debug.Log(&quot;OnGraphStop=======================&quot;);&#125;public override void OnBehaviourPlay(Playable playable, FrameData info)&#123;    base.OnBehaviourPlay(playable, info);    Debug.Log(&quot;OnBehaviourPlay=======================&quot;);    if (null != go)    &#123;        go.transform.position = pos;    &#125;&#125;public override void OnBehaviourPause(Playable playable, FrameData info)&#123;    base.OnBehaviourPause(playable, info);    Debug.Log(&quot;OnBehaviourPause=======================&quot;);    if (null != go)    &#123;        go.transform.position = Vector3.zero;    &#125;&#125;public override void OnBehaviourDelay(Playable playable, FrameData info)&#123;    base.OnBehaviourDelay(playable, info);    Debug.Log(&quot;OnBehaviourDelay=======================&quot;);&#125;</code></pre><p>}</p><p>这样，就可以将MoveObjPlayableAsset脚本直接拖动到PlayableTrack轨道上，具体的脚本逻辑在MoveObjPlayableBehaviour中写，我这里的逻辑是改变物体的坐标，具体逻辑就看具体需求了，这里只是举个例子</p><p>程序入口我放在一个runner的脚本里，挂在场景中的一个物体上</p><p>using UnityEngine;</p><p>public class Runner : MonoBehaviour<br />{<br />void Start()<br />{<br />var go = new GameObject(“TimelineGo”);<br />var unit = TimelineHelper.AddTimeline(go, “myTimeline”);<br />unit.director.extrapolationMode = UnityEngine.Playables.DirectorWrapMode.Loop;<br />unit.SetBinding(“at”, go);</p><pre><code>    var p = unit.GetClip&lt;MoveObjPlayableAsset&gt;(&quot;myPlayable&quot;, &quot;b&quot;);    p.go = gameObject;    unit.Play();&#125;</code></pre><p>}</p><p>运行就可以看到有一个TimelineGo物体挂了Timeline运行了</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
          <category> 理论知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> untiy </tag>
            
            <tag> timeline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 原生插件</title>
      <link href="2021/02/12/Unity-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6/"/>
      <url>2021/02/12/Unity-%E5%8E%9F%E7%94%9F%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" /><h2 id="plugin-inspector"><a class="markdownIt-Anchor" href="#plugin-inspector"></a> Plugin Inspector</h2><p>使用 Plugin Inspector 可指定 Unity 加载和引用插件文件时依据的条件。还可以为插件指定其他平台特定的各种设置。</p><p>在 Project 窗口中选择插件一个文件来查看 Plugin Inspector：</p><p><a href="https://docs.unity.cn/cn/current/Manual/PluginInspector.html"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog/cj/cj1.png" alt="" /></a>)</p><p>General<br />Auto Reference 设置用于控制项目中其他程序集和程序集定义引用插件文件的方式。</p><p>如果选中 Auto Reference（默认设置），则所有预定义程序集和程序集定义自动引用插件文件。如果要显式声明对插件的引用，请取消选中 Auto Reference。</p><p>使用 Assembly Definition Inspector 窗口可以声明对程序集定义的插件文件的引用。请参阅脚本编译和程序集定义文件以了解更多信息。</p><p>重要信息：取消选中 Auto Reference 时，不能从 Unity 为项目创建的预定义程序集引用插件。这些预定义程序集包含项目中尚未使用程序集定义文件分配给其他程序集的所有脚本。如果一个插件已取消选中 Auto Reference 属性，只有使用程序集定义文件创建的程序集中包含的代码才能引用该插件中的类、函数或其他资源。</p><p>若要限制可引用插件（通过显式声明对该插件的所有引用）的范围，请将 Auto Reference 设置为 false。例如，如果项目中只有一组脚本使用插件，那么可以为这些脚本创建一个程序集定义文件，并创建对该插件的显式引用。因为在整个项目中不再自动引用该插件，所以项目中的其他脚本不会误用该插件。（多个程序集可以使用该插件，但是所有程序集必须显式声明此依赖关系。）另外，如果更改插件，则只需重新编译相关程序集，而不必重新编译整个项目。</p><p>还可以使用对插件的显式引用，防止资源包中使用的插件与导入了此包的项目中的其他代码发生冲突。</p><p>Select platforms for plugin<br />使用 Select platforms for plugin 设置可以定义一些与插件文件兼容并要使用该插件文件的平台。平台列表包括 Editor 本身（适用于播放模式以及编辑时运行的任何脚本）、Standalone 以及安装了 Unity 构建支持包的平台（例如 Android、iOS 和 WebGL）。</p><p>可以选中 Any Platform 并（可选）排除个别平台。或者也可以取消选中 Any Platform 并（可选）包含个别平台。</p><p>Platform settings<br />选择平台后，可从下面单独的 Platform Settings 部分中指定其他选项，例如 CPU 类型和特定操作系统。Inspector 窗口的此区域包含每个选定平台的选项卡。一些平台没有设置，或只有少数设置（例如 CPU 和操作系统选择）。</p><p>如有可能，Inspector 仅显示适用于特定平台上的插件类型的设置。例如，对于带有 .dll 扩展名的原生插件文件，Inspector 只显示适用于 Windows 的选项，因为此类插件只能用于 Windows。</p><p>注意：无法卸载原生插件。如果 Editor 已经加载一个插件，那么即使在同一 Editor 会话中更改了该插件的设置，该插件仍会保持加载。必须重新启动 Unity 才能卸载该插件。</p><p>Editor 设置<br />使用 Editor 平台设置可以指定插件兼容的 CPU 架构和操作系统。</p><p><a href="https://docs.unity.cn/cn/current/Manual/PluginInspector.html"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog//cj/cj2.png" alt="" /></a>)</p><p>大多数托管插件与任何 CPU 和操作系统都兼容，但是原生插件通常只与单个操作系统兼容，并且根据其编译方式，可能只与单个 CPU 架构兼容。</p><p>例如，如果选择 CPU X86，Unity 会在运行旧版本的 32 位 Editor 时加载插件，但是在运行 64 位版时不加载插件。</p><p>同样，如果选择 OS Windows，Unity 会在 Windows 系统上运行 Editor 时加载插件，但在 OS X 或 Linux 系统上运行时不加载插件。</p><p>独立平台设置<br />对于独立平台（Windows、OS X、Linux），可以选择与库兼容的 CPU 架构。对于托管库，除非访问特定的系统 API，否则它们通常与任何操作系统和架构都兼容。原生库仅与单个操作系统兼容，但可能与 32 位和/或 64 位 CPU 架构兼容。</p><p>另请参阅：独立平台的 Player 设置。</p><p>通用 Windows 平台<br />通用 Windows 平台插件设置将在相应的部分中具体介绍。请参阅：</p><p>通用 Windows 平台：.NET 脚本后端上的插件</p><p>通用 Windows 平台：IL2CPP 脚本后端上的插件</p><p>Android<br />对于可能与 Android 兼容的插件文件，可以选择 CPU 架构。所选的架构必须与编译库时针对的架构匹配。Unity 不会验证是否已选择正确的设置。</p><p>iOS 和 tvOS<br />iOS 和 tvOS 设置可用于指定插件所依赖的 iOS 框架（如有）。</p><p><a href="https://docs.unity.cn/cn/current/Manual/PluginInspector.html"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog//cj/cj3.png" alt="" /></a></p><p>对于动态加载的库，以及包含动态加载的库或运行时需要加载的任何资产和资源的捆绑包和框架，请选中 Add to Embedded Binaries 选项。选中此选项后，Unity 将设置 Xcode 项目选项，从而将插件文件复制到最终应用程序包。</p><p>对于必须编译到构建中的插件源代码文件，可以在 Compile Flags 字段中指定编译时需要的任何标志。</p><h2 id="define-constraints"><a class="markdownIt-Anchor" href="#define-constraints"></a> Define Constraints</h2><p>使用 Define Constraints 设置可以指定一些符号，必须定义（或取消定义）这些符号才能使用插件文件。</p><p>Unity 仅在已满足所有 Define Constraints 时才加载和引用插件。约束的作用与 C# 中的 #if 预处理器指令类似，但在程序集级别（而不是脚本级别）运行。必须定义 Define Constraints 设置中的所有符号，才能满足这些约束。还可以用否定 !（叹号）符号作为符号的前缀，指定必须取消定义该符号。例如，如果在 Define Constraints 中指定以下符号：</p><p><a href="https://docs.unity.cn/cn/current/Manual/PluginInspector.html"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog//cj/cj4.png" alt="" /></a></p><p>当未定义符号 ENABLE_IL2CPP 且已定义符号 UNITY_2018_3_OR_NEWER 时，满足这些约束。或者换言之，仅在 Unity 2018.3 或更高版本的非 IL2CPP 脚本运行时中才加载和引用此程序集。</p><p>可以使用 Unity 的任何内置定义符号或者项目的 Scripting Define Symbols Player 设置中定义的任何符号。请参阅平台相关的编译以了解更多信息（包括内置符号的列表）。请注意，<strong>Scripting Define Symbols</strong> 设置与具体平台相关。确保在所有相关平台上都定义了必要的符号。</p><p>插件检测<br />Unity 通过文件扩展名来检测 Assets 文件夹中的文件是否为插件。具有以下扩展名的文件将视为插件：</p><ul><li>.dll</li><li>.winmd</li><li>.so</li><li>.jar</li><li>.aar</li><li>.xex</li><li>.def</li><li>.suprx</li><li>.prx</li><li>.sprx</li><li>.rpl</li><li>.cpp</li><li>.cc</li><li>.c</li><li>.h</li><li>.jslib</li><li>.jspre</li><li>.bc</li><li>.a</li><li>.m</li><li>.mm</li><li>.swift</li><li>.xib</li></ul><p>Unity 还将某些文件夹视为捆绑插件。Unity 并不在此类文件夹中寻找其他插件文件，所以文件夹中的所有内容被视为单个插件。在文件夹包含以下扩展名之一时，Unity 会检测该文件夹是否为捆绑插件：</p><ul><li>.framework</li><li>.bundle</li><li>.plugin</li><li></li></ul><p>最后，Unity 将父级路径与 Assets/Plugins/Android/ 完全匹配的文件夹视为 Android 库插件文件夹。Unity 对此类文件夹的处理方式与包含特殊扩展名 .plugin、.bundle 和 .framework 的文件夹相同。</p><p>默认设置<br />Unity 根据插件所在的文件夹，设置插件文件的导入设置的默认值：<br /><a href="https://docs.unity.cn/cn/current/Manual/PluginInspector.html"><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yuxushen/CDN/blog//cj/cj5.png" alt="" /></a></p><p>2018–11–26</p><p>删除了三星电视支持。</p><p>在 2018.3 版中添加了用于插件的 Auto Reference 和 Define Constraints 设置</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 理论知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity 事件系统</title>
      <link href="2021/02/12/Unity-%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/02/12/Unity-%E4%BA%8B%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><meta name="referrer" content="no-referrer" /><h2 id="一-消息系统"><a class="markdownIt-Anchor" href="#一-消息系统"></a> 一、 消息系统</h2><p>新的 UI 系统使用一种消息系统来取代 SendMessage。该系统是纯 C# 系统，旨在解决 SendMessage 存在的一些问题。该系统使用可在 MonoBehaviour 上实现的自定义接口来指示组件能够从消息系统接收回调。调用时会指定目标游戏对象；该调用将在游戏对象的所有（实现了指定接口以据此发出该调用的）组件上发出。借助消息系统可传递自定义用户数据，并可指定事件应在游戏对象层级视图中传播的距离：应该仅为指定的游戏对象执行，还是应该在子对象和父对象上也执行。除此之外，消息框架还提供 helper 函数来搜索和查找实现了给定消息接口的游戏对象。</p><p>消息系统是通用型系统，不仅可用于 UI 系统，还可用于一般游戏代码。添加自定义消息事件相对简单，借助 UI 系统用于所有事件处理的相同框架即可实现。</p><h3 id="如何定义自定义消息"><a class="markdownIt-Anchor" href="#如何定义自定义消息"></a> 如何定义自定义消息？</h3><p>如果希望定义自定义消息，此过程相对简单。在 UnityEngine.EventSystems 命名空间中，有一个名为“IEventSystemHandler”的基本接口。从此接口扩展的任何内容都可以视为通过消息系统接收事件的目标。</p><p>要发送消息，可使用一个静态 helper 类来执行此操作。在参数方面，需要消息的目标对象、一些特定于用户的数据以及一个映射到所需目标消息接口中特定函数的仿函数 (functor)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecuteEvents.Execute&lt;ICustomMessageTarget&gt;(target, null, (x,y)&#x3D;&gt;x.Message1());</span><br></pre></td></tr></table></figure><p>此代码将在游戏对象目标上实现了 ICustomMessageTarget 接口的所有组件上执行 Message1 函数。ExecuteEvents 类的脚本文档中介绍了执行函数的其他形式，例如在子对象或父对象中执行。</p><h2 id="二-支持的事件"><a class="markdownIt-Anchor" href="#二-支持的事件"></a> 二、 支持的事件</h2><p>事件系统支持许多事件，并可在用户编写的自定义输入模块中进一步自定义它们。</p><p>独立输入模块和触摸输入模块支持的事件由接口提供，通过实现该接口即可在 MonoBehaviour 上实现这些事件。如果配置了有效的事件系统，则会在正确的时间调用事件。</p><ul><li>IPointerEnterHandler - OnPointerEnter - 当指针进入对象时调用</li><li>IPointerExitHandler - OnPointerExit - 当指针退出对象时调用</li><li>IPointerDownHandler - OnPointerDown - 在对象上按下指针时调用</li><li>IPointerUpHandler - OnPointerUp - 松开指针时调用（在指针正在点击的游戏对象上调用）</li><li>IPointerClickHandler - OnPointerClick - 在同一对象上按下再松开指针时调用</li><li>IInitializePotentialDragHandler - OnInitializePotentialDrag - 在找到拖动目标时调 用，可用于初始化值</li><li>IBeginDragHandler - OnBeginDrag - 即将开始拖动时在拖动对象上调用</li><li>IDragHandler - OnDrag - 发生拖动时在拖动对象上调用</li><li>IEndDragHandler - OnEndDrag - 拖动完成时在拖动对象上调用</li><li>IDropHandler - OnDrop - 在拖动目标对象上调用</li><li>IScrollHandler - OnScroll - 当鼠标滚轮滚动时调用</li><li>IUpdateSelectedHandler - OnUpdateSelected - 每次勾选时在选定对象上调用</li><li>ISelectHandler - OnSelect - 当对象成为选定对象时调用</li><li>IDeselectHandler - OnDeselect - 取消选择选定对象时调用</li><li>IMoveHandler - OnMove - 发生移动事件（上、下、左、右等）时调用</li><li>ISubmitHandler - OnSubmit - 按下 Submit 按钮时调用</li><li>ICancelHandler - OnCancel - 按下 Cancel 按钮时调用</li></ul><h2 id="三-射线投射器"><a class="markdownIt-Anchor" href="#三-射线投射器"></a> 三、射线投射器</h2><p>事件系统需要一种方法来检测当前输入事件需要发送到的位置，而此方法由射线投射器 (Raycaster) 提供。给定屏幕空间位置的情况下，射线投射器将收集所有潜在目标，确定它们是否在给定位置下，然后返回最接近屏幕的对象。提供了几种类型的射线投射器：</p><ul><li>图形射线投射器 (Graphic Raycaster) - 用于 UI 元素，位于画布上，并在画布中搜索</li><li>2D 物理射线投射器 (Physics 2D Raycaster) - 用于 2D 物理元素</li><li>物理射线投射器 (Physics Raycaster) - 用于 3D 物理元素</li></ul><p>当场景中存在并启用了射线投射器时，只要从输入模块发出查询，事件系统就会使用该射线投射器。</p><p>如果使用多个射线投射器，那么这些射线投射器都会进行针对性投射，并且结果将根据与元素的距离进行排序。</p>]]></content>
      
      
      <categories>
          
          <category> unity </category>
          
          <category> 理论知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unity </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
